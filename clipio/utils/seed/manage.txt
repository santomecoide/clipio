import sys
import settings

from clipio.utils.management.metadata_management_utility import MetadataManagementUtility
from clipio.utils.management.iot_resource_management_utility import IoTResourceManagementUtility
from clipio.utils.management.server_management_utility import ServerManagementUtility
from clipio.utils.management.app_management_utility import AppManagementUtility
from clipio.utils.management.settings_management_utility import SettingsManagementUtility
from clipio.utils.management.help_management_utility import HelpManagementUtility

from clipio.crawler.crawler import Crawler
from clipio.eca.eca import Eca
from clipio.mqtt.mqtt_client import MqttClient

def component_handler(components):
	for component in components:
		component.run()
	try:
		while True: pass
	except KeyboardInterrupt:
		for component in components:
			component.stop()

if __name__ == "__main__":
	help_mu = HelpManagementUtility
	try:
		com = sys.argv[1]
		
		if com == "generate" or com == "g":
			settings_mu = SettingsManagementUtility(settings)
			metadata_mu = MetadataManagementUtility(settings)
			iot_resource_mu = IoTResourceManagementUtility(settings)
			app_mu = AppManagementUtility(settings)
			
			if settings_mu.validate():
				metadata_mu.generate_metadata()
				iot_resource_mu.generate_resources()
				app_mu.generate_files()
		
		if com == "server":
			settings_mu = SettingsManagementUtility(settings)
			metadata_mu = MetadataManagementUtility(settings)
			crawler = Crawler(settings)
			eca = Eca(settings)
			mqtt = MqttClient(settings)
			server_mu = ServerManagementUtility(settings)
			
			if settings_mu.validate():
				for tag in metadata_mu.tags():
					server_mu.add_iot_resource(tag) 
				
				component_handler([crawler, eca, server_mu, mqtt])				
		
		if com == "help" or com == "h":
			help_mu.help()
	
	except IndexError:
		help_mu.help()